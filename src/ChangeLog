2004-05-05  Stefan Jahn  <stefan@lkcc.org>

	* check_netlist.cpp: Checking presence and necessity of DC
	analysis.

2004-05-02  Stefan Jahn  <stefan@lkcc.org>

	* net.cpp: Implemented implicit dependencies of analyses.

	* analysis.cpp (delAnalysis): Implemented counterpart of
	addAnalysis().

	* check_netlist.cpp: Appended some more required model
	parameters to the diode model.

	* spsolver.cpp: Implemented a function which restores the 
	original netlist.  Modifications were necessary because of the
	actual analysis algorithm.

2004-05-01  Stefan Jahn  <stefan@lkcc.org>

	* vector.cpp: Fixed copy constructor.

2004-04-28  Michael Margraf  <michael.margraf@alumni.tu-berlin.de>

	* class complex: sin(), cos(), tan(), cot(), arcsin(), arccos(),
	arctan(), arccot(), sinh(), cosh(), tanh(), coth(), arsinh(),
	arcosh(), artanh(), arcoth(), log2()
	* class vector: sin(), cos(), tan(), cot(), arcsin(), arccos(),
	arctan(), arccot(), sinh(), cosh(), tanh(), coth(), arsinh(),
	arcosh(), artanh(), arcoth(), max(), min(), sum(), prod(), avg(),
	log2()
	* class evaluate: sin(), cos(), tan(), cot(), arcsin(), arccos(),
	arctan(), arccot(), sinh(), cosh(), tanh(), coth(), arsinh(),
	arcosh(), artanh(), arcoth(), max(), min(), sum(), prod(), avg(),
	log2()
	* fixed many bugs in class evaluate/complex

2004-04-28  Stefan Jahn  <stefan@lkcc.org>

	* matrix.cpp: Implemented all remaining matrix conversions not
	limited	to two-port parameters (ytos, ztos, ytoz, ztoy).

2004-04-26  Stefan Jahn  <stefan@lkcc.org>

	* complex.cpp: Added remaining modulo '%' operators.

	* dcsolver.cpp: Fixed memory leak when re-using a DC analysis.

	* net.cpp: Fixed same order parameter sweep definitions.

2004-04-25  Stefan Jahn  <stefan@lkcc.org>

	* input.cpp: Putting substrate definitions into an environment
	and assiging these to the appropriate components.
	(createSubstrate): New function creating substrate instances.

	* check_netlist.cpp: Added substrate and microstrip line
	to the list of available netlist definitions.  Allowing 
	variables in microstrip elements.

	* variable.h (class variable): Changed variable content
	within environments.

	* property.cpp (getDouble): Returning changed variable content.

	* parasweep.cpp: Using parameter sweep variable as now
	defined in the environment.

	* input.cpp: Putting correct parameter sweep variable into
	environment.

	* check_netlist.cpp: Validating parameter sweeps.  Detecting 
	cyclic definitions.

2004-04-19  Stefan Jahn  <stefan@lkcc.org>

	* vector.cpp: Replaced 'module()' functions by '%' operator.

	* scan_netlist.l: Passing '%' character to parser.

	* parse_netlist.y: Added '%' operator.

	* evaluate.cpp: Fixed unary minus and sqrt funtions.

	* equation.cpp: Checking return type of evaluators.  Displaying
	the '%' operator like '+' and alike operators.  Giving notice
	for undefined variables if necessary.

	* complex.cpp: Defined '%' operator instead of 'modulo()'
	function.

2004-04-18  Michael Margraf  <michael.margraf@alumni.tu-berlin.de>

	* class complex: dB(), sqrt(), exp(), ln(), log10(),
	floor(), modulo(), 3x pow()
	* class vector:  set(), dB(), sqrt(), exp(), ln(), log10(),
	3x modulo(), 3x pow(), operator - (), operator  = ()
	* class evaluate: plus, minus, times, over, modulo, power,
	real, imag, abs, conj, norm, phase, arg, dB, sqrt, exp, ln,
	log10

2004-04-13  Stefan Jahn  <stefan@lkcc.org>

	* spsolver.cpp: Adding (independent) frequency vector only once
	to output dataset.

	* parasweep.cpp: Fixed variable dependency assignments.

	* net.cpp: Reordering analysis runtime correctly.

	* dcsolver.cpp: Removed unnecessary frequency vector in output
	dataset.

	* dataset.cpp: New helper functions.

	* check_netlist.cpp: New required parameter for variable sweep
	definitions "Sim".

	* analysis.cpp (addAnalysis): New function.  Adds a sub analysis
	to the analysis object.

2004-04-04  Stefan Jahn  <stefan@lkcc.org>

	* logging.c: Check whether logging is possible.

	* dcsolver.cpp: Using complete representation of the D-MNA matrix
	including off-diagonal elements.  Changed all callers.

2004-03-28  Stefan Jahn  <stefan@lkcc.org>

	* vector.cpp: Fixed a bug in the copy constructor.

	* ucs.cpp (main): Calling the global equation solver.

	* property.cpp: Fixed an uninitialized value bug.

	* logging.c: Fixed a buffer overrun bug.

	* evaluate.cpp: Added some examples for the application
	implementations.

	* equation.cpp: Added the final evaluate() function to each
	type of equation node.
	(equation_solver): This new function is called in order to
	run the global equation solver.

	* equation.cpp: Added toString() function to each type of
	equation node.

2004-03-21  Stefan Jahn  <stefan@lkcc.org>

	* evaluate.h (class evaluate): New class implementing the
	actual evaluation function (applications) for the equations
	in Qucs.

	* equation.cpp (reorderEquations): The function reorders 
	equations and determines whether they can be evaluated or not
	in this new order.
	(applyTypes): Type checking function implemented.

2004-03-20  Stefan Jahn  <stefan@lkcc.org>

	* strlist.cpp (toString, join): Two new functions.  One for
	returning a string representation of a string list and the
	other for joining two string lists.

	* equation.cpp (detectCycles, findDuplicate): New functions
	determining whether there are or duplicate cyclic equations.

2004-03-14  Stefan Jahn  <stefan@lkcc.org>

	* equation.cpp: Started to implement the equation checker.

2004-03-08  Stefan Jahn  <stefan@lkcc.org>

	* scan_netlist.l: Introduced new EQN state for parsing 
	equations in netlists.  The parser+scanner is now working 
	correctly.

2004-03-07  Stefan Jahn  <stefan@lkcc.org>

	* parse_netlist.y: Added parser and scanner rules for 
	equations inside netlists.

2004-02-18  Stefan Jahn  <stefan@lkcc.org>

	* eqnsys.cpp (solve_lu): New equation system solver implemented
	using so called LU decomposition.

2004-02-17  Stefan Jahn  <stefan@lkcc.org>

	* eqnsys.cpp (solve_gauss_jordan): New solution method for
	linear equation systems implemented.

	* Makefile.am (libqucsator_a_SOURCES): The libqucsator library
	can be used by the Qucs GUI in order to handle datasets.  The
	header 'libqucsator.h' must be included.

2004-02-16  Stefan Jahn  <stefan@lkcc.org>

	* operatingpoint.cpp: New class representing an operating
	point of a non-linear component.

	* circuit.cpp: Added the functionality in order to handle
	the operating point of non-linear components.

	* object.cpp (hasProperty): New function checking whether an
	object has a certain property or not.

	* dcsolver.cpp: Generalized the G matrix creation to apply
	also to components with more than two ports.

	* circuit.cpp (setY, getY): Made these functions depending on
	the specified port numbers.

2004-02-15  Stefan Jahn  <stefan@lkcc.org>

	* matrix.cpp (exchange): New function for swapping two rows
	of a matrix object.  Used during Gaussian elimination.

	* eqnsys.cpp: New class implementing a linear equation system
	solver with different kind of algorithms.

2004-02-13  Stefan Jahn  <stefan@lkcc.org>

	* vector.cpp: Vectors do have an arbitrary origin.  Used
	to identify analysis results.

	* variable.cpp: Added loads of operations regarding double
	values.

	* ucs.cpp (main): Creating root environment and passing
	it down to analyses.

	* property.cpp, object.cpp: Properties can now also be variables.

	* net.cpp: Ordering analysis for additional parameter sweeps
	implemented.

	* input.cpp: Handling variables correctly.  Creating variables
	in a certain environment and using them later works somehow.

	* dcsolver.cpp: Temporarily removed the frequency vector
	from the DC dataset result (must be fixed).

	* dataset.cpp: It's now possible to assign dependencies to
	variable vectors in a dataset originated by some analysis (or
	something else).

	* check_netlist.c: The '.SW' definition is now accepted by
	the netlist parser.  Variables can now be resolved by parameter
	sweep definitions.

	* analysis.cpp: Added type identifier, environment and
	sub analysis.

	* Makefile.am (qucsator_SOURCES): Added the new source files.

	* parasweep.cpp, parasweep.h: Parameter sweep implementation.

	* environment.cpp, environment.h: New class implementing
	a variable name space.

2004-02-09  Stefan Jahn  <stefan@lkcc.org>

	* dcsolver.cpp: Additionally saving the reference node voltage
	value into the components's nodes.

	* check_netlist.c, input.cpp: Incorporated the new DC current
	probe.
	
	* check_netlist.c: Allowing the new parameter 'n' (ideality
	coefficient of the saturation current).

	* variable.cpp, variable.h: New files.  The variable class
	is going to be the big calculator merging all kinds of math
	types.  Also it will be the base object for calculation
	environments and global variables.

2004-02-03  Stefan Jahn  <stefan@lkcc.org>

	* dcsolver.cpp: Non-linear DC circuit analysis is somewhat
	working now.

2004-02-01  Stefan Jahn  <stefan@lkcc.org>

	* dcsolver.cpp: First attempt to implement nonlinear
	DC analysis.  Not yet working.

	* matrix.cpp: Fixed determinant result for empty matrices.

2004-01-30  Stefan Jahn  <stefan@lkcc.org>

	* dcsolver.cpp: It's now possible to simulate circuits with
	more than a single built in voltage source.

	* circuit.cpp: Applied changes for circuits with more than a
	single built in voltage source.

2004-01-28  Stefan Jahn  <stefan@lkcc.org>

	* dcsolver.cpp: Generalized the creation of the B, C, D, E and
	I matrices for dependent sources like VCCS, CCCS, etc.

	* circuit.h (class circuit): Renamed 'G' functionality into
	'Y' preparing it for use in AC analysis.  Also added some more
	functionality regarding the MNA.

2004-01-24  Stefan Jahn  <stefan@lkcc.org>

	* circuit.h (class circuit): Added microstrip substrate 
	property to basic circuit class.

2004-01-17  Stefan Jahn  <stefan@lkcc.org>

	* parse_dataset.y: Fixed reduce/reduce conflict.

	* scan_dataset.l: Added explicit rule for complex number.

2003-12-26  Stefan Jahn  <stefan@lkcc.org>

	* spsolver.cpp: Now running calcS() instead of calc().

	* net.cpp: Now counts the DC voltage sources in a circuit 
	list.

	* matrix.cpp: Fixed bug in matrix multiplication.

	* circuit.cpp: Each circuit has now 'type' field containing
	a circuit identifier.  Renamed calc() to calcS() and added a
	virtual calcG() method.  Changed all components.

	* check_netlist.c: Applied changes for DC analysis.

	* dcsolver.cpp, dcsolver.h, nodelist.cpp, nodelist.h: New 
	files implementing the DC analysis for passive elements for
	now.

2003-12-21  Stefan Jahn  <stefan@lkcc.org>

	* analysis.cpp, analysis.h, spsolver.cpp, spsolver.h: New files.
	Reorganized the source code in order to prepare it for other
	analysis types.

2003-12-20  Stefan Jahn  <stefan@lkcc.org>

	* input.cpp (createCircuit): Added 'Vdc', 'Idc' and 'Vac'
	components to the list of available components.

2003-12-07  Stefan Jahn  <stefan@lkcc.org>

	* check_netlist.c: Made modifications regarding the
	symmetrical transformer.

	* input.cpp (createCircuit): Added 'sTr' component to the
	list of available circuit components.

2003-12-05  Stefan Jahn  <stefan@lkcc.org>

	* matrix.cpp (stoy, stoz): New matrix conversion routines.

2003-12-01  Stefan Jahn  <stefan@lkcc.org>

	* net.cpp: Added support for differential s parameter 
	ports.

2003-11-30  Stefan Jahn  <stefan@lkcc.org>

	* check_netlist.c: Checking the number of .SP actions and
	the number of Pac definitions.

2003-11-28  Stefan Jahn  <stefan@lkcc.org>

	* matrix.cpp, matrix.h: Added new matrix computation class.
	Implemented all function necessary for port impedance
	transformations (add, sub, mul, inverse, etc.).

2003-11-22  Stefan Jahn  <stefan@lkcc.org>

	* parse_touchstone.y: New parser grammar for the touchstone file
	format implemented.

	* scan_touchstone.l: New scanner (lexer) for the touchstone file
	format added.  Adjusted Makefile rule.

	* vector.cpp: The 'add()' method can now also join the vector
	object data with another vector.

	* dataset.cpp (load_touchstone): Added import functionality for
	the touchstone file format.

	* strlist.cpp: Two new function 'contains()' and 'get()'
	implemented.

	* scan_dataset.l: Allow dataset values to be normal integers.

2003-11-20  Stefan Jahn  <stefan@lkcc.org>

	* checker.c: Fixed bug in available component list.

2003-11-15  Stefan Jahn  <stefan@lkcc.org>

	* scan_dataset.l, parse_dataset.y, check_dataset.cpp: Scanner,
	parser and checker functionality needed for the dataset::load()
	functionality.  Makefile rules added.

	* dataset.cpp (load): New function.  Can be uses to read a
	dataset from a file.

	* vector.cpp: New function reverse(), added dependency list
	and original request size.

	* strlist.cpp, strlist.h: New class representing a list
	of strings.  Added those files to 'Makefile.am'.

2003-11-08  Stefan Jahn  <stefan@lkcc.org>

	* logging.c: Documented this file's functions.
