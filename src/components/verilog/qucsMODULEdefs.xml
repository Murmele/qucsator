<!--

  Copyright (C) 2006 Helene Parruitte <parruit@enseirb.fr>
  Copyright (C) 2006 Bertrand Ardouin <ardouin@xmodtech.com>
  Copyright (C) 2006, 2007 Stefan Jahn <stefan@lkcc.org>

  This is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

-->

<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE admst SYSTEM "admst.dtd">
<admst version="2.2.5" xmlns:admst="http://mot-adms.sourceforge.net/xml-files/admst">


<!-- handling of device: starting point -->
<admst:for-each select="/module">
<!-- definition of variables -->
<admst:value-of select="name"/>
<admst:variable name="module" select="%s"/>
<admst:count select="node[location='external' and name!='GND']"/>
<admst:variable name="nbr_nodes" select="%s"/>
</admst:for-each>

<admst:open file="$module.defs.h">
<admst:for-each select="/module">
<admst:text format="  /* $module verilog device */\n"/>
<admst:text format="  { &quot;$module&quot;, $nbr_nodes, PROP_COMPONENT, PROP_NO_SUBSTRATE, PROP_NONLINEAR,\n    {\n"/>
<admst:for-each select="variable">
  <admst:if test="[input='yes']">
    <admst:value-of select="name"/> 
    <admst:text format="      { &quot;%s&quot;, "/>
    <admst:choose>
    <admst:when test="[type='real']">
      <admst:text format="PROP_REAL"/>
    </admst:when>
    <admst:when test="[type='integer']">
      <admst:text format="PROP_INT"/>
    </admst:when>
    <admst:otherwise>
      <admst:text format="PROP_STR"/>
    </admst:otherwise>
    </admst:choose>
    <admst:text format=", { "/>
    <admst:apply-templates select="default" match=":expression"/>
    <admst:text format=", PROP_NO_STR }, "/>
    <!-- parameter range -->
    <admst:choose>
    <admst:when test="[nilled(range)]">
      <admst:text format="PROP_NO_RANGE"/>
    </admst:when>
    <admst:when test="[name!='pnp' and name!='npn']">
      <admst:text format="{ "/>
      <admst:choose>
      <admst:when test="range/infexpr[hasspecialnumber='YES']">
        <admst:text format="'.', 0, "/>
      </admst:when>
      <admst:otherwise>
        <admst:choose>
          <admst:when test="range[infboundtype='range_bound_include']">
            <admst:text format="'[', "/>
          </admst:when>
          <admst:otherwise>
            <admst:text format="']', "/>
          </admst:otherwise>
        </admst:choose>
        <admst:apply-templates select="range/infexpr" match=":expression"/>
        <admst:text format=", "/>
      </admst:otherwise>
      </admst:choose>
      <admst:choose>
      <admst:when test="range/supexpr[hasspecialnumber='YES']">
        <admst:text format="0, '.'"/>
      </admst:when>
      <admst:otherwise>
        <admst:apply-templates select="range/supexpr" match=":expression"/>
	<admst:choose>
	  <admst:when test="range[supboundtype='range_bound_include']">
	    <admst:text format=", ']'"/>
          </admst:when>
          <admst:otherwise>
            <admst:text format=", '['"/>
          </admst:otherwise>
        </admst:choose>
      </admst:otherwise>
      </admst:choose>
      <admst:text format=" }"/>
    </admst:when>
    <admst:otherwise>
      <admst:text format="PROP_POS_RANGE"/>
    </admst:otherwise>
    </admst:choose>
    <admst:text format=" },\n"/>
  </admst:if>
</admst:for-each>
<admst:text format="      { &quot;Type&quot;, PROP_STR, { PROP_NO_VAL, &quot;npn&quot; }, PROP_NO_RANGE },\n"/>
<admst:text format="      { &quot;Temp&quot;, PROP_REAL, { 26.85, PROP_NO_STR }, PROP_MIN_VAL (K) },\n"/>
<admst:text format="      PROP_NO_PROP },\n"/>
<admst:text format="    { PROP_NO_PROP }\n  },\n"/>
</admst:for-each>
</admst:open>
<admst:message format="$module.defs.h: file created\n"/>
</admst>
